{"version":3,"sources":["webpack:///./src/components/project/RepoCard.tsx","webpack:///./src/components/project/ProjectGrid.tsx","webpack:///./src/hooks/repos.ts","webpack:///./src/components/project/Section.tsx","webpack:///./src/pages/projects.mdx"],"names":["name","description","stars","forks","url","watchers","href","p","sx","maxWidth","height","gap","as","px","py","mr","alignItems","ml","ProjectGrid","repos","columns","textAlign","map","repo","i","RepoCard","key","useRepos","useStaticQuery","githubData","data","user","repositories","edges","edge","node","stargazerCount","forkCount","totalCount","sections","app","ai","scrape","fs","misc","popularity","MostPopular","numRepos","filter","Boolean","sort","r1","r2","slice","Section","includes","_frontmatter","layoutProps","MDXContent","components","props","mdxType","title","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-projects-mdx-d3e68d7a3274f52c5e45.js","sourcesContent":["import * as React from \"react\";\n\nimport { Heading, Flex, Text, Grid } from \"theme-ui\";\n\nimport { StarIcon, GitForkIcon } from \"../icons\";\nimport { CardLink } from \"../Link\";\n\nimport { RepoType } from \"../../hooks/repos\";\n\ninterface RepoCardProps extends RepoType {}\n\n// TODO: Consider adding watchers\nexport default ({\n  name,\n  description,\n  stars,\n  forks,\n  watchers,\n  url,\n}: RepoCardProps) => (\n  <CardLink href={url} p={3} sx={{ maxWidth: 450, height: 170 }}>\n    <Grid gap={2}>\n      <Heading as=\"h4\">{name}</Heading>\n      <Flex>\n        <CardLink href={`${url}/stargazers`} px={2} py={1} mr={2}>\n          <Flex sx={{ alignItems: \"center\" }}>\n            <StarIcon />\n            <Text ml={2}>{stars}</Text>\n          </Flex>\n        </CardLink>\n        <CardLink href={`${url}/network/members`} px={2} py={1}>\n          <Flex sx={{ alignItems: \"center\" }}>\n            <GitForkIcon />\n            <Text ml={2}>{forks}</Text>\n          </Flex>\n        </CardLink>\n      </Flex>\n      <Text>{description}</Text>\n    </Grid>\n  </CardLink>\n);\n","import * as React from \"react\";\n\nimport { Grid } from \"theme-ui\";\nimport RepoCard from \"./RepoCard\";\n\nimport { RepoType } from \"../../hooks/repos\";\n\ninterface ProjectGridProps {\n  repos: RepoType[];\n}\n\nconst ProjectGrid: React.FC<ProjectGridProps> = ({ repos }) => (\n  <Grid gap={3} columns={[1, 2]} sx={{ textAlign: \"left\" }}>\n    {repos.map((repo, i) => (\n      <RepoCard key={i} {...repo} />\n    ))}\n  </Grid>\n);\n\nexport default ProjectGrid;\n","import { graphql, useStaticQuery } from \"gatsby\";\n\nexport interface RepoType {\n  name: string;\n  description: string;\n  stars: number;\n  forks: number;\n  watchers: number;\n  url: string;\n}\n\ninterface RepoQueryResult {\n  githubData: {\n    data: {\n      user: {\n        repositories: {\n          edges: {\n            node: {\n              name: string;\n              description: string;\n              stargazerCount: number;\n              forkCount: number;\n              watchers: {\n                totalCount: number;\n              };\n              url: string;\n            };\n          }[];\n        };\n      };\n    };\n  };\n}\n\nconst useRepos: () => RepoType[] = () => {\n  const result: RepoQueryResult = useStaticQuery(\n    graphql`\n      {\n        githubData {\n          data {\n            user {\n              repositories {\n                edges {\n                  node {\n                    name\n                    description\n                    stargazerCount\n                    forkCount\n                    watchers {\n                      totalCount\n                    }\n                    url\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    `\n  );\n\n  const repos = result.githubData.data.user.repositories.edges.map((edge) => {\n    return {\n      name: edge.node.name,\n      description: edge.node.description,\n      stars: edge.node.stargazerCount,\n      forks: edge.node.forkCount,\n      watchers: edge.node.watchers.totalCount, // TODO: Consider adding to project card\n      url: edge.node.url,\n    };\n  });\n\n  return repos;\n};\n\nexport default useRepos;\n","import * as React from \"react\";\n\nimport ProjectGrid from \"./ProjectGrid\";\n\nimport useRepos, { RepoType } from \"../../hooks/repos\";\n\nconst sections: {\n  [key: string]: string[];\n} = {\n  app: [\n    \"dawsonbooth.github.io\",\n    \"sudoku-halie\",\n    \"pynsweeper\",\n    \"react-native-use-dimensions\",\n    \"react-repo-card\",\n  ],\n  ai: [\"predictive-text\", \"pong-ai\"],\n  scrape: [\"emoji-search\", \"vodscrepe\"],\n  fs: [\"dustpan\", \"slippi-search\", \"treefrog\", \"media-mover\"],\n  misc: [\"ascii-art\", \"sudoku-tools\"],\n};\n\nconst popularity = (repo: RepoType) => repo.stars + repo.forks + repo.watchers;\n\ninterface MostPopularProps {\n  numRepos: number;\n}\n\nexport const MostPopular: React.FC<MostPopularProps> = ({ numRepos }) => {\n  const repos = useRepos()\n    .filter((repo) => Boolean(repo.description))\n    .sort((r1, r2) => popularity(r2) - popularity(r1))\n    .slice(0, numRepos);\n\n  return <ProjectGrid repos={repos} />;\n};\n\ninterface ReposByNameProps {\n  name: string;\n}\n\nconst Section: React.FC<ReposByNameProps> = ({ name: name }) => {\n  const repos = useRepos()\n    .filter((repo) => sections[name].includes(repo.name))\n    .filter((repo) => Boolean(repo.description))\n    .sort((r1, r2) => popularity(r2) - popularity(r1));\n\n  return <ProjectGrid repos={repos} />;\n};\n\nexport default Section;\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport { Box } from \"theme-ui\";\nimport Layout from \"../components/layout\";\nimport Section, { MostPopular } from \"../components/project/Section\";\nimport Link from \"../components/Link\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    {\n      /* TODO: Search for projects by their keywords in GitHub */\n    }\n    <Layout title=\"Projects\" mdxType=\"Layout\">\n      <h1>{`Personal Projects`}</h1>\n      <h2>{`Most Popular`}</h2>\n      <MostPopular numRepos={6} mdxType=\"MostPopular\" />\n      <br></br>\n      <h2>{`Web/Application Development`}</h2>\n      <Section name=\"app\" mdxType=\"Section\" />\n      <br></br>\n      <h2>{`Artificial Intelligence`}</h2>\n      <Section name=\"ai\" mdxType=\"Section\" />\n      <br></br>\n      <h2>{`Web Scraping`}</h2>\n      <Section name=\"scrape\" mdxType=\"Section\" />\n      <br></br>\n      <h2>{`Filesystem`}</h2>\n      <Section name=\"fs\" mdxType=\"Section\" />\n      <br></br>\n      <h2>{`Miscellaneous Packages`}</h2>\n      <Section name=\"misc\" mdxType=\"Section\" />\n      <Box sx={{\n        textAlign: \"center\"\n      }} mdxType=\"Box\">\n        <p><a parentName=\"p\" {...{\n            \"href\": \"https://github.com/dawsonbooth/\"\n          }}>{`Check out all my open source projects on my GitHub!`}</a></p>\n      </Box>\n    </Layout>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}